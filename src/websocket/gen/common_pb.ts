// 共通定義

// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file common.proto (package hoge.common, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message hoge.common.Variant
 */
export class Variant extends Message<Variant> {
  /**
   * value
   *
   * @generated from oneof hoge.common.Variant.value
   */
  value: {
    /**
     * Represents a bool value
     *
     * @generated from field: bool b_value = 1;
     */
    value: boolean;
    case: "bValue";
  } | {
    /**
     * Represents a int32 value
     *
     * @generated from field: int32 i32_value = 2;
     */
    value: number;
    case: "i32Value";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Variant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hoge.common.Variant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "b_value", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "value" },
    { no: 2, name: "i32_value", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Variant {
    return new Variant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Variant {
    return new Variant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Variant {
    return new Variant().fromJsonString(jsonString, options);
  }

  static equals(a: Variant | PlainMessage<Variant> | undefined, b: Variant | PlainMessage<Variant> | undefined): boolean {
    return proto3.util.equals(Variant, a, b);
  }
}

