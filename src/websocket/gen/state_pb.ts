// @generated by protoc-gen-es v1.7.0 with parameter "target=ts"
// @generated from file state.proto (package hoge, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Variant } from "./common_pb.js";
import { HogeControl } from "./control_pb.js";

/**
 * @generated from message hoge.Status
 */
export class Status extends Message<Status> {
  /**
   * @generated from field: int32 status = 1;
   */
  status = 0;

  /**
   * @generated from field: hoge.common.Variant value = 2;
   */
  value?: Variant;

  constructor(data?: PartialMessage<Status>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hoge.Status";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "value", kind: "message", T: Variant },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Status {
    return new Status().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Status {
    return new Status().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Status {
    return new Status().fromJsonString(jsonString, options);
  }

  static equals(a: Status | PlainMessage<Status> | undefined, b: Status | PlainMessage<Status> | undefined): boolean {
    return proto3.util.equals(Status, a, b);
  }
}

/**
 * @generated from message hoge.HogeState
 */
export class HogeState extends Message<HogeState> {
  /**
   * @generated from field: int64 timestamp = 1;
   */
  timestamp = protoInt64.zero;

  /**
   * @generated from field: hoge.Status status = 2;
   */
  status?: Status;

  /**
   * @generated from field: hoge.ControlResult control_result = 3;
   */
  controlResult?: ControlResult;

  constructor(data?: PartialMessage<HogeState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hoge.HogeState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "status", kind: "message", T: Status },
    { no: 3, name: "control_result", kind: "message", T: ControlResult },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HogeState {
    return new HogeState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HogeState {
    return new HogeState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HogeState {
    return new HogeState().fromJsonString(jsonString, options);
  }

  static equals(a: HogeState | PlainMessage<HogeState> | undefined, b: HogeState | PlainMessage<HogeState> | undefined): boolean {
    return proto3.util.equals(HogeState, a, b);
  }
}

/**
 * @generated from message hoge.ControlResult
 */
export class ControlResult extends Message<ControlResult> {
  /**
   * @generated from field: hoge.control.HogeControl control_data = 1;
   */
  controlData?: HogeControl;

  /**
   * @generated from field: hoge.ControlResult.Result result = 2;
   */
  result = ControlResult_Result.SUCCESS;

  constructor(data?: PartialMessage<ControlResult>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "hoge.ControlResult";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "control_data", kind: "message", T: HogeControl },
    { no: 2, name: "result", kind: "enum", T: proto3.getEnumType(ControlResult_Result) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ControlResult {
    return new ControlResult().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ControlResult {
    return new ControlResult().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ControlResult {
    return new ControlResult().fromJsonString(jsonString, options);
  }

  static equals(a: ControlResult | PlainMessage<ControlResult> | undefined, b: ControlResult | PlainMessage<ControlResult> | undefined): boolean {
    return proto3.util.equals(ControlResult, a, b);
  }
}

/**
 * @generated from enum hoge.ControlResult.Result
 */
export enum ControlResult_Result {
  /**
   * @generated from enum value: SUCCESS = 0;
   */
  SUCCESS = 0,

  /**
   * @generated from enum value: FAILURE = 1;
   */
  FAILURE = 1,

  /**
   * @generated from enum value: BUSY = 2;
   */
  BUSY = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ControlResult_Result)
proto3.util.setEnumType(ControlResult_Result, "hoge.ControlResult.Result", [
  { no: 0, name: "SUCCESS" },
  { no: 1, name: "FAILURE" },
  { no: 2, name: "BUSY" },
]);

